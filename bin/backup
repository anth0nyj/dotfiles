#!/usr/bin/env bash
#
# Copyright © 2017 seamus tuohy, <code@seamustuohy.com>
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the included LICENSE file for details.

# Setup

#Bash should terminate in case a command or chain of command finishes with a non-zero exit status.
#Terminate the script in case an uninitialized variable is accessed.
#See: https://github.com/azet/community_bash_style_guide#style-conventions
# set -e
# set -u

# TODO remove DEBUGGING
set -x
source <(gpg -qd ~/dotfiles/private/backup/backup_vars.gpg)

## INSTALLING
## Requires python-boto package

cleanup() {
    # Reset Passwords
    exit 0
}

trap 'cleanup' EXIT

google_backup_home() {
    duplicity -v 5 --encrypt-key="${ENCRYPTION_KEY}" \
              --exclude="${HOME}/temp" \
              --exclude="${HOME}/Downloads" \
              --exclude="${HOME}/games" \
              --exclude="${HOME}/.cache" \
              --exclude="${HOME}/.android" \
              --exclude="${HOME}/.vagrant.d" \
              --exclude="${HOME}/.duplicity" \
              --exclude="${HOME}/.gephi" \
              --exclude="${HOME}/.npm" \
              --exclude="${HOME}/Android" \
              --exclude="${HOME}/.config/google-chrome" \
              --exclude="${HOME}/VirtualBox\ VMs" \
              "${HOME}" \
              "${GOOGLE_HOME_BACKUP_LOCATION}"
}

google_backup_archive() {
    duplicity -v 5 --encrypt-key="${ENCRYPTION_KEY}" \
              "${LOCAL_ARCHIVE_PATH}" \
              "${GOOGLE_ARCHIVE_BACKUP_LOCATION}"
}

google_backup_task() {
    duplicity -v 5 --encrypt-key="${TASK_ENCRYPTION_KEY}" \
              "${LOCAL_TASK_PATH}" \
              "${GOOGLE_TASK_BACKUP_LOCATION}"
}

google_backup_org() {
    duplicity -v 5 --encrypt-key="${TASK_ENCRYPTION_KEY}" \
              "${LOCAL_ORG_PATH}" \
              "${GOOGLE_ORG_BACKUP_LOCATION}"
}

duplicity_list_files() {
    BACKUP=$1
    duplicity list-current-files \
              --encrypt-key="${ENCRYPTION_KEY}" \
              "${BACKUP}"
}

# "${GOOGLE_ARCHIVE_BACKUP_LOCATION}"

duplicity_recover_file() {
    local REMOTE_FILE_PATH=$1
    local LOCAL_PATH=$2
    local BACKUP=$3
    duplicity --file-to-restore \
              "${REMOTE_FILE_PATH}" \
              "${BACKUP}" \
              "${LOCAL_PATH}"
}

main() {
    local cmd=$(printf "Backup\nList Files\nGet File" | dmenu -l 21)
    printf "Choose backup do you want to use?\n"
    local backup=$(printf "Device\nArchive" | dmenu -l 21)

    if [[ -z "$cmd" ]]; then
        exit 1
    fi
    if [[ -z "$backup" ]]; then
        exit 1
    fi

    if [[ $cmd == "Backup" ]]; then
        if [[ $backup == "Device" ]]; then
            google_backup_home
        elif [[ $backup == "Archive" ]]; then
            google_backup_archive
        elif [[ $backup == "Task" ]]; then
            google_backup_task
        elif [[ $backup == "Org" ]]; then
            google_backup_org
        fi
    elif [[ $cmd == "List Files" ]]; then
        if [[ $backup == "Device" ]]; then
            duplicity_list_files "${GOOGLE_HOME_BACKUP_LOCATION}"
        elif [[ $backup == "Archive" ]]; then
            duplicity_list_files "${GOOGLE_ARCHIVE_BACKUP_LOCATION}"
        fi
    elif [[ $cmd == "Get File" ]]; then
        printf "What is the file path for the file in the backup: "
        read REMOTE_FILE_PATH
        printf "What is the local file path where you should put the file: "
        read LOCAL_PATH
        if [[ $backup == "Device" ]]; then
            duplicity_recover_file \
                "${REMOTE_FILE_PATH}" \
                "${LOCAL_PATH}" \
                "${GOOGLE_HOME_BACKUP_LOCATION}"
        elif [[ $backup == "Archive" ]]; then
            duplicity_recover_file \
                "${REMOTE_FILE_PATH}" \
                "${LOCAL_PATH}" \
                "${GOOGLE_ARCHIVE_BACKUP_LOCATION}"
        fi
    else
        usage
    fi
}





#goog_archive
# google
 main
# duplicity_verify
