DOCKER_REPO_PREFIX="s2e"

# Helpers

docker_cleanup(){
        local containers
        mapfile -t containers < <(docker ps -aq 2>/dev/null)
        docker rm "${containers[@]}" 2>/dev/null
        local volumes
        mapfile -t volumes < <(docker ps --filter status=exited -q 2>/dev/null)
        docker rm -v "${volumes[@]}" 2>/dev/null
        local images
        mapfile -t images < <(docker images --filter dangling=true -q 2>/dev/null)
        docker rmi "${images[@]}" 2>/dev/null
}

docker_del_stopped(){
        local name=$1
        local state
        state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

        if [[ "$state" == "false" ]]; then
                docker rm "$name"
        fi
}

docker_stop_and_delete(){
        local name=$1
        local state
        state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

        if [[ "$state" == "true" ]]; then
                docker stop "$name"
        fi
        docker_del_stopped "$name"
}


relies_on(){
        for container in "$@"; do
                local state
                state=$(docker inspect --format "{{.State.Running}}" "$container" 2>/dev/null)

                if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
                        echo "$container is not running, starting it for you."
                        $container
                fi
        done
}

docker_build_container(){
    local SRC_DIR="${1}"
    local NAME="${2}"
    # Go to source directory
    local DOCKER_REPO_PREFIX="s2e"
    cd "${SRC_DIR}"
    docker build --rm --force-rm -t "${DOCKER_REPO_PREFIX}/${NAME}" .
}


keypassxc(){
        docker_del_stopped keypassxc

        docker run -d \
                -v /etc/localtime:/etc/localtime:ro \
                -v /tmp/.X11-unix:/tmp/.X11-unix \
                -v /usr/share/X11/xkb:/usr/share/X11/xkb:ro \
                -e "DISPLAY=unix${DISPLAY}" \
                -v /etc/machine-id:/etc/machine-id:ro \
                -v $HOME/.config/keepassxc:/root/.config/keepassxc \
                --name keypassxc \
                ${DOCKER_REPO_PREFIX}/keepassxc
}

archive_site() {
      docker_del_stopped sloppy_archivist

      local URL="$1"
      docker run \
      -v ${HOME}/code/sloppy_archivist:/etc/spider \
      -e URL="${URL}" \
      --name sloppy_archivist \
      ${DOCKER_REPO_PREFIX}/sloppy_archivist
}

viper() {
        docker_del_stopped viper
        docker run \
        -v ~/malware:/home/viper/workdir/malware \
        -it \
        --name viper \
        ${DOCKER_REPO_PREFIX}/viper
        ../viper/viper.py -p malware
}

viper_reconnect() {
        local last_session=$(docker ps -a -q --filter='ancestor=s2e/viper' | head -n 1)
        if [[ "$last_session" != "" ]]; then
                docker start $last_session
                docker attach $last_session
        fi
}

viper_bash() {
        docker_del_stopped viper_bash
        docker run \
        -v ~/malware:/home/viper/workdir/malware \
        -it \
        --name viper_bash \
        ${DOCKER_REPO_PREFIX}/viper_bash
        bash
}


boxjs() {
        docker_del_stopped boxjs

        local tmpdir=$(mktemp -dt "BOX_JS_RESULTS.XXXXX")
        local samples="${tmpdir}/samples/"
        local results="${tmpdir}/results/"
        mkdir -p "${samples}"
        mkdir -p "${results}"
        cp "${1}" "${samples}"

        docker run \
        --rm \
        --volume "${samples}":/samples \
        --volume "${results}":/results \
        --name boxjs \
        s2e/box-js \
        box-js /samples --output-dir=/results --loglevel=debug

        # Get results directory
        cp "${results}" .
}

# maltools() {
#         docker_del_stopped maltools
#        #  docker run --rm -it \
#        #  --security-opt="no-new-privileges" \
#        #  --cap-drop=all \
#        # -v ~/malware:/home/malware \
#        # --name maltools \
#        # ${DOCKER_REPO_PREFIX}/malware-tools
#         docker run --rm -it \
#        -v ~/malware:/home/malware \
#        --name maltools \
#        ${DOCKER_REPO_PREFIX}/malware-tools
# }

harpoon() {
       docker_del_stopped harpoon

       docker run \
       --rm -it \
       --name harpoon \
       -v ~/malware:/home/harpoon/malware \
       -v ~/dotfiles/private/harpoon:/home/harpoon/.config/harpoon/ \
       ${DOCKER_REPO_PREFIX}/harpoon
}

# cutter() {
#        docker_del_stopped cutter

#        docker run \
#        --rm -it \
#        --name cutter \
#        ${DOCKER_REPO_PREFIX}/cutter bash
# }


cutter() {
     docker_del_stopped cutter
     local CONFDIR="${HOME}/.config/radare2"
     mkdir -p "${CONFDIR}"
     touch ${CONFDIR}/radare2rc
     mkdir -p ${CONFDIR}/r2-config
     xhost +local:docker && \
     docker run \
          --rm \
          -it \
          --name cutter \
          --cap-drop=ALL  \
          --cap-add=SYS_PTRACE \
          -e DISPLAY=$DISPLAY \
          -v /tmp/.X11-unix:/tmp/.X11-unix:ro \
          -v ${HOME}/malware:/var/sharedFolder \
          -v ${CONFDIR}/radare2rc:/home/r2/.radare2rc \
          -v ${CONFDIR}/r2-config:/home/r2/.config/radare2 \
          ${DOCKER_REPO_PREFIX}/cutter
    xhost -local:docker

# --entrypoint "/bin/bash" \
}

thug() {
       docker_del_stopped thug
       echo "Are you sure?"
       echo "You don't have this working well yet..."
       docker run \
       --rm -it \
       -v ${HOME}/malware/thug/logs:/home/thug/logs \
       --name thug \
       ${DOCKER_REPO_PREFIX}/thug
       thug -FZM "$1"

# -FZM "$@"
}

thug_bash() {
       docker_del_stopped thug_bash
       echo "Because you always forget the flags"
       echo "thug -FZM [URL]"
       echo "==================================="
       docker run \
       --rm -it \
       -v ${HOME}/malware/thug/logs:/home/thug/logs \
       --name thug_bash \
       ${DOCKER_REPO_PREFIX}/thug
       bash
}

skype(){
        docker_del_stopped skype
        relies_on pulseaudio

        docker run -d \
                -v /etc/localtime:/etc/localtime:ro \
                -v /tmp/.X11-unix:/tmp/.X11-unix \
                -e "DISPLAY=unix${DISPLAY}" \
                --link pulseaudio:pulseaudio \
                -e PULSE_SERVER=pulseaudio \
                --security-opt seccomp:unconfined \
                --device /dev/video0 \
                --group-add video \
                --group-add audio \
                --name skype \
                ${DOCKER_REPO_PREFIX}/skype
}
wireshark(){
        docker_del_stopped wireshark

        docker run -d \
                -v /etc/localtime:/etc/localtime:ro \
                -v /tmp/.X11-unix:/tmp/.X11-unix \
                -e "DISPLAY=unix${DISPLAY}" \
                --cap-add NET_RAW \
                --cap-add NET_ADMIN \
                --net host \
                --name wireshark \
                ${DOCKER_REPO_PREFIX}/wireshark
}
nmap(){
        docker run --rm -it \
                --net host \
                ${DOCKER_REPO_PREFIX}/nmap "$@"
}
slack(){
        docker_del_stopped slack

        docker run -d \
                -v /etc/localtime:/etc/localtime:ro \
                -v /tmp/.X11-unix:/tmp/.X11-unix \
                -e "DISPLAY=unix${DISPLAY}" \
                --device /dev/snd \
                --device /dev/dri \
                --device /dev/video0 \
                --group-add audio \
                --group-add video \
                -v "${HOME}/.slack:/root/.config/Slack" \
                --ipc="host" \
                --name slack \
                ${DOCKER_REPO_PREFIX}/slack "$@"
}

libreoffice(){
        docker_del_stopped libreoffice

        docker run -d \
                -v /etc/localtime:/etc/localtime:ro \
                -v /tmp/.X11-unix:/tmp/.X11-unix \
                -e "DISPLAY=unix${DISPLAY}" \
                -v "${HOME}/slides:/root/slides" \
                -e GDK_SCALE \
                -e GDK_DPI_SCALE \
                --name libreoffice \
                ${DOCKER_REPO_PREFIX}/libreoffice
}

inkscape(){
        docker_del_stopped inkscape

        docker run -d \
                -v /etc/localtime:/etc/localtime:ro \
                -v /tmp/.X11-unix:/tmp/.X11-unix \
                -e "DISPLAY=unix${DISPLAY}" \
                -v "${HOME}/Pictures:/root/Pictures" \
                -v "${HOME}/.gtkrc:/root/.gtkrc" \
                -e GDK_SCALE \
                -e GDK_DPI_SCALE \
                --name inkscape \
                ${DOCKER_REPO_PREFIX}/inkscape
}